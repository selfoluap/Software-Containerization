Presentation:

Architecture:

Describe the architecture of the application using one or more types of UML diagrams - Max 2 points
Show and describe the artifacts you created to build the docker images - Max 1 point. 
Show and describe the artifacts created to deploy the application to Kubernetes - Max 2 points.

Show how you configured the pre-requisites for the application - Max 5 points

Our Load Balancer is managed by Google and is automatically created, when the ingress resource is applied
We are not using the default gce ingress resource, but the more advanced nginx ingress controller

    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm install nginx-ingress ingress-nginx/ingress-nginx

For our persistent volume we are using the standard storage class which is working fine with GKE. Adapted the mount
path to fit with the GCP path.

Our docker images are pushed to Container Registry and are also retrieved from there. Our helm charts are stored in 
Artifact Registry. Both are services provided by GCP.

Certificates: Explain how we create the TLS certificate

We decided to implement the following three roles: developer, devops-engineer and manager. We are adjusting the
permissions of the google users by binding these roles to them. 
    kubectl auth can-i delete pod --as g.savchenko@student.vu.nl

Network policies:


Show how you build the container images and publish to a registry (1 point):

    docker build . -t gcr.io/diesel-dominion-375713/frontend:vp1
    docker push gcr.io/diesel-dominion-375713/frontend:vp1

    docker build . -t gcr.io/diesel-dominion-375713/backend:vp1
    docker push gcr.io/diesel-dominion-375713/backend:vp1

Show how you deploy the application for the first time (1 point):

    helm package helm
    gcloud auth print-access-token | helm registry login -u oauth2accesstoken  --password-stdin https://us-central1-docker.pkg.dev
    helm push software-containerization-0.1.0.tgz oci://us-central1-docker.pkg.dev/diesel-dominion-375713/helm-repo
    gcloud artifacts docker images list us-central1-docker.pkg.dev/diesel-dominion-375713/helm-repo
    helm install software-containerization oci://us-central1-docker.pkg.dev/diesel-dominion-375713/helm-repo/software-containerization --version 0.1.0

Show how to scale the application horizontally (stateless parts only) (1 point):

    change replicaCount to 5 in values.yaml and version to 0.1.1 in charts.yaml
    helm upgrade software-containerization software-containerization-0.1.1.tgz

    or

    kubectl scale -n default deploy software-containerization-frontend-deployment --replicas=5
    kubectl scale -n default deploy software-containerization-backend-deployment --replicas=5


Show how you re-build the application after a source code change (1 point):

    docker build . -t gcr.io/diesel-dominion-375713/frontend:vptest1
    docker push gcr.io/diesel-dominion-375713/frontend:vptest1
    kubectl set image deployment/software-containerization-frontend-deployment software-containerization-frontend-container=gcr.io/diesel-dominion-375713/frontend:vptest1


Show how you upgrade the running application in two ways:
deployment rollout (2 points):

canary update (2 points):


Show how to uninstall the application (1 point):

    helm uninstall software-containerization
    kubectl get all -n default


